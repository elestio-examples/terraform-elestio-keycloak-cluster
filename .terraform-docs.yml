# # see: https://terraform-docs.io/user-guide/configuration/version
# version: ">= 0.10, < 0.12"

# see: https://terraform-docs.io/user-guide/configuration/formatter
formatter: markdown table

# see: https://terraform-docs.io/user-guide/configuration/header-from
header-from: documentation/header.md

# see: https://terraform-docs.io/user-guide/configuration/footer-from
footer-from: documentation/footer.md

# see: https://terraform-docs.io/user-guide/configuration/recursive
# recursive:
#   enabled: false
#   path: modules

# see: https://terraform-docs.io/user-guide/configuration/content
content: |-
  {{ .Header }}

  ## Usage

  If you want to use this module with your own database and load balancer, you can do so:

  ```hcl
  {{ include "documentation/usage.tf" }}
  ```

  ## Complete Example

  If you want to deploy everything at once (database, load balancer, and nodes), you can follow this example.

  We will do the following:
  - Install terraform and copy a ready-to-use configuration
  - Deploy the cluster with 2 nodes
  - Output the cluster information
  - Verify that it's working
  - Add a third node

  ### Install Terraform

  First, let's install the Terraform client on your machine: https://learn.hashicorp.com/tutorials/terraform/install-cli

  <details><summary>Instructions for MacOS:</summary>

  ```bash
  brew tap hashicorp/tap
  brew install hashicorp/tap/terraform
  terraform -v
  ```

  </details>

  ### Copy the configuration

  Create a new directory and the following files step by step:

  ```response
  .
  ├── main.tf
  ├── terraform.tfvars
  ├── terraform_rsa
  ├── terraform_rsa.pub
  └── .gitignore
  ```

  <details><summary>Create `main.tf` file with this content:</summary>

  ```hcl
  {{ include "examples/postgres_2nodes_lb/main.tf" }}
  ```

  </details>

  <details><summary>Create `terraform.tfvars` file with this content and fill it with your sensitive information:</summary>

  ```hcl
  {{ include "examples/postgres_2nodes_lb/terraform.tfvars.example" }}
  ```

  </details>

  <details><summary>Generate a dedicated SSH Key (required by the module to configure the nodes):</summary>

  ```bash
  ssh-keygen -t rsa -f terraform_rsa
  ```

  </details>

  <details><summary>If you want to commit your code, create `.gitignore` file with this content:</summary>

  ```plaintext
  {{ include "examples/postgres_2nodes_lb/.gitignore" }}
  ```

  </details>

  Your configuration is ready.

  ### Deploy the cluster

  Run the following commands:

  ```bash
  terraform init
  terraform apply
  ```

  It will ask you to confirm the deployment. Type `yes` and press `Enter`.

  The deployment will take a few minutes.

  ### Output the cluster information

  You can show all the information about the created resources with the `terraform show` command.

  ```bash
  terraform show
  ```

  The output is large so you can use the custom outputs for essential information.

  The access information of your database:

  ```bash
  terraform output database_admin
  ```

  ```response
  {
  "password" = "*****"
  "url" = "https://service-q92us-u525.vm.elestio.app:443/"
  "user" = "example@mail.com"
  }
  ```

  The access information of your nodes:

  ```bash
  terraform output nodes_admins
  ```

  ```response
  {
    "keycloak-1" = {
      "password" = "*****"
      "url" = "https://keycloak-1-u525.vm.elestio.app:443/"
      "user" = "root"
    }
    "keycloak-2" = {
      "password" = "*****"
      "url" = "https://keycloak-2-u525.vm.elestio.app:443/"
      "user" = "root"
    }
  }
  ```

  And the cname of the load balancer:

  ```bash
  terraform output load_balancer_cname
  ```

  ```response
  "lb-1m81h-u525.vm.elestio.app"
  ```

  ## Verify that it's working

  You can check the logs of the various deployed services in the Elestio dashboard.

  1. Go to [https://dash.elest.io](https://dash.elest.io)
  2. Select your cluster project
  3. Select the first Keycloak Service > Overview > View app logs

  You should see these lines in the output.

  ```response
  {{ include "documentation/logs.txt" }}
  ```

  If any node responds with an error, you can replace it by :
  - Changing the `server_name` in `main.tf` and running `terraform apply`.
  - Or removing the node from the `nodes` attribute and running `terraform apply`. Then add it back and run `terraform apply` again.

  You can also check service configuration by connecting to the nodes: **Your Keycloak service > Tools > VSCode**.
  You can inspect the docker-compose file and infinispan configuration generated by the module.

  These files are replaced every time you delete or add a node with the module.
  If you want to change certain fixed configurations, we suggest you fork the terraform module and modify the `resources` directory.

  ## Add a third node

  You can add new nodes to the cluster by adding them to the `nodes` attribute in the `main.tf`.

  ```hcl
  {{ include "documentation/add_new_nodes.tf" }}
  ```

  If you run `terraform apply` again, it will ask you to confirm the deployment.
  Type `yes` and press `Enter`.
  The new node will join the cluster in a few minutes.

  ## Recommendations

  **Secrets** - Do not commit your API token, Keycloak password, SSH key...

  **Configuration** - If you want to know all available attributes, check the [clickhouse service documentation](https://registry.terraform.io/providers/elestio/elestio/latest/docs/resources/clickhouse). E.g. you can disable the service firewall with `firewall_enabled = false`.

  **Hosting** - Look this guide [Providers, Datacenters and Server Types](https://registry.terraform.io/providers/elestio/elestio/latest/docs/guides/providers_datacenters_server_types) to know about the available options.

  **Resources limit** - If you add more nodes, you may attains the resources limit of your account, please visit your account [quota page](https://dash.elest.io/account/add-quota) to ask for more resources.

  {{ .Footer }}
  {{ .Inputs }}
  {{ .Modules }}
  {{ .Outputs }}
  {{ .Providers }}
  {{ .Requirements }}
  {{ .Resources }}

output:
  file: 'README.md'
  mode: inject
  template: |-
    <!-- BEGIN_TF_DOCS -->
    {{ .Content }}
    <!-- END_TF_DOCS -->

output-values:
  enabled: false
  from: ''

sort:
  enabled: true
  by: name

settings:
  anchor: true
  color: true
  default: true
  description: false
  escape: true
  hide-empty: true
  html: true
  indent: 2
  lockfile: true
  read-comments: true
  required: true
  sensitive: true
  type: true
